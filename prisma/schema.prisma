datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  duplicated_template_id   String?
  workspace_icon           String?
  workspace_id             String?
  workspace_name           String?
  bot_id                   String?

  owner   Owner?  @relation(fields: [ownerId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ownerId String? @unique

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  owner        Owner    @relation(fields: [ownerId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ownerId      String
}

model Owner {
  id      String    @id @default(cuid())
  type    String
  session Session[]

  user    User?
  Account Account?
}

model Person {
  id    String  @id @default(cuid())
  email String?
  user  User?
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  avatar_url     String?
  type           String?
  hashedPassword String?
  personEmail    String?

  balance      Int           @default(0)
  createdAt    DateTime      @default(now())
  accounts     Account[]
  sessions     Session[]
  transactions Transaction[]

  person   Person? @relation(fields: [personId], references: [id])
  personId String? @unique

  owner   Owner?  @relation(fields: [ownerId], references: [id])
  ownerId String? @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id          Int    @id @default(autoincrement())
  title       String
  ageRating   Int
  ticketPrice Int    @default(0)
  seats       Int[]

  transactions Transaction[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  seats     Int[]
  totalCost Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
